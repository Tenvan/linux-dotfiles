#!/usr/bin/env bash

csource() {
    if [ -r "$@" ]; then
        . "$@"
    fi
}

csource /etc/os-release

#####################
# init distro check #
#####################
LINUX_VERSION_NAME="$NAME"
LINUX_BASED="$ID_LIKE"

export IS_ARCH_BASED=false
export IS_RHEL_BASED=false
export IS_DEBIAN_BASED=false

export IS_ARCH=false
export IS_RHEL=false
export IS_MANJARO=false

export IS_ARCO=false
export IS_FEDORA=false
export IS_CENTOS=false
export IS_DEBIAN=false

DEBUG=true

ERROR_PAKAGE_UNINST=
ERROR_PAKAGE_INST=

# Distro Basis
if [ "$LINUX_BASED" = "arch" ]; then
    IS_ARCH_BASED=true
    PACTOOL=pacman
    if [ -x "$(command -v yay)" ]; then
        export PACTOOL=yay
    fi
fi

if [ "$LINUX_BASED" = "fedora" ] || [ "$ID" = "fedora" ]; then
    IS_RHEL_BASED=true
    PACTOOL=dnf
fi

if [ "$ID" = "debian" ]; then
    IS_DEBIAN_BASED=true
    PACTOOL=apt
fi

# Distro
if [ "$LINUX_VERSION_NAME" = "Arch" ]; then
    IS_ARCH=true
fi

if [ "$LINUX_VERSION_NAME" = "ArcoLinux" ]; then
    IS_ARCO=true
fi

if [ "$LINUX_VERSION_NAME" = "Manjaro Linux" ]; then
    IS_MANJARO=true
fi

if [ "$ID" = "fedora" ]; then
    IS_FEDORA=true
fi

if [ "$ID" = "debian" ]; then
    IS_DEBIAN=true
fi

if [ "$LINUX_VERSION_NAME" = "Red Hat Enterprise Linux" ]; then
    IS_RHEL=true
fi

if [ "$LINUX_VERSION_NAME" = "CentOS Stream" ]; then
    IS_CENTOS=true
fi

PACKER="$PACTOOL"

if [ "$IS_RHEL_BASED" = true ]; then
    PACKER_ALL="--verbose -y $@"
fi 

if [ "$IS_RHEL_BASED" = true ]; then
    PACKER_ALL="--color always --needed --overwrite \* $@"
fi

if [ "$IS_DEBIAN_BASED" = true ]; then
    PACKER_ALL="--verbose -y $@"
fi

dumpVersion() {
    echo "Linux Version..: $LINUX_VERSION_NAME"
    echo "Based on ArchLinux...: $IS_ARCH_BASED"
    echo "Based on Redhat......: $IS_RHEL_BASED"
    echo "Based on Debian......: $IS_DEBIAN_BASED"
    echo "IsArch...............: $IS_ARCH"
    echo "IsArco...............: $IS_ARCO"
    echo "IsManjaro............: $IS_MANJARO"
    echo "IsFedora.............: $IS_FEDORA"
    echo "IsRHEL...............: $IS_RHEL"
    echo "IsCentOS.............: $IS_CENTOS"
    echo "IsDebian.............: $IS_DEBIAN"
    echo "Package Manager......: $PACTOOL"
    echo "AUR Manager..........: $PACKER"
    echo "Packer Params........: $PACKER_ALL"
}

initInstall() {
    INSTALL_SCRIPT=$1
    echo "Step: init Install '$INSTALL_SCRIPT'"
    if [ $IS_ARCH_BASED = true ]; then
        sudo rm /var/lib/pacman/db.lck 2&> /dev/null
    fi
}

install() {
    PAKAGE_INST="${PAKAGE_INST} $1"
    
    if [ $IS_RHEL_BASED = true ] || [ $IS_DEBIAN_BASED = true ]; then
        eval "sudo $PACKER install $PACKER_ALL $1"
    else
        eval "$PACKER -S $PACKER_ALL $1"
    fi
    
    retVal=$?
    if [ $retVal -ne 0 ]; then
        echo "error on install: $1"
        ERROR_PAKAGE_INST="${ERROR_PAKAGE_INST} $1"
    fi
}

uninstall() {
    PAKAGE_UNINST="${PAKAGE_UNINST} $1"
    
    if [ $IS_RHEL_BASED = true ] || [ $IS_DEBIAN_BASED = true ]; then
        eval "sudo $PACKER remove $1"
    else
        eval "$PACKER -R --noconfirm $1"
    fi
    
    retVal=$?
    if [ $retVal -ne 0 ]; then
        echo "error on uninstall: $1"
        ERROR_PAKAGE_UNINST="${ERROR_PAKAGE_UNINST} $1"
    fi
}

errorCheck() {
    retVal=$?
    if [ $retVal -ne 0 ]; then
        echo "abort installation script '$INSTALL_SCRIPT': $1 ($retVal)"
        exit $retVal
    fi
}

finish() {
    echo "Step: finish Install"
    
    if [ "$ERROR_PAKAGE_UNINST" = "" ]; then
        echo 'No Errors on Uninstall'
    else
        echo "Error on Uninstall: ${ERROR_PAKAGE_UNINST}"
        echo "Error on Uninstall: ${ERROR_PAKAGE_UNINST}" >> error_uninstall.txt
    fi
    
    if [ "$ERROR_PAKAGE_INST" = "" ]; then
        echo 'No Errors on Install'
    else
        echo "Error on Install: ${ERROR_PAKAGE_INST}"
        echo "Error on Install: ${ERROR_PAKAGE_INST}" >> error_install.txt
    fi
}

run() {
    if command -v $1 &>/dev/null; then
        #pgrep -u "$USER" -fx "$1" >/dev/null || ($@) &
        if ! pgrep "$1"; then
            "$@" &
        fi
        notify-send -t 10000 "AUTOSTART" "Kommando:\n'$1'"
    else
        notify-send -t 10000 -u critical "Error Start" "Kommando '$1' nicht gefunden"
    fi
}

restart() {
    killall "$1"
    sleep 1
    run "$@"
}

# ex = EXtractor for all kinds of archives
# usage: ex <file>
expand() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar xjf $1 ;;
            *.tar.gz) tar xzf $1 ;;
            *.bz2) bunzip2 $1 ;;
            *.rar) unrar x $1 ;;
            *.gz) gunzip $1 ;;
            *.tar) tar xf $1 ;;
            *.tbz2) tar xjf $1 ;;
            *.tgz) tar xzf $1 ;;
            *.zip) unzip $1 ;;
            *.Z) uncompress $1 ;;
            *.7z) 7z x $1 ;;
            *.deb) ar x $1 ;;
            *.tar.xz) tar xf $1 ;;
            *.tar.zst) unzstd $1 ;;
            *) echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

if [ $DEBUG = "true" ]; then
    dumpVersion
fi

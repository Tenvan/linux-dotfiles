---
- hosts: localhost
  connection: local
  name: "==========> Install Tenvans Dotfiles with AwesomeWm Desktop <=========="
  become: false

  vars:
    is_dry: false

    is_arch_based: false
    is_arch: false
    is_arcolinux: false
    is_manjaro: false

    is_rhel_based: false
    is_rhel: false
    is_fedora: false
    is_centos: false

    is_debian_based: false
    is_debian: false
    is_ubuntu: false

    user_folder:
      - Bilder
      - Dokumente
      - Downloads
      - Musik
      - Videos
      - Vorlagen

  vars_prompt:
    - name: user_email
      prompt: What is your email?
      default: ralf.stich@infoniqa.com
      private: false

    - name: user_short
      prompt: What is your user id?
      default: "{{ lookup('ansible.builtin.env', 'USER') }}"

    - name: browser
      prompt: What is your default browser?
      default: microsoft-edge-stable

    - name: home_store_dir
      prompt: What is path to the big-home folder?
      default: "/srv/BIGDATA/HOME/{{ lookup('ansible.builtin.env', 'USER') }}"

  tasks:
    - name: "=====> Initiate <====="
      ansible.builtin.include_tasks: lib/inits.yml

    - name: "=====> Install User Layout Packages <====="
      ansible.builtin.include_tasks: lib/layout-user.yml

    - name: "=====> merge .gitconfig <====="
      ansible.builtin.blockinfile:
        path: "{{ home_dir }}/.gitconfig"
        mode: u+rwx,g+rx,o+rx
        create: true
        block: |
          [core]
          editor = micro
          whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
          pager = delta

          [color]
          ui = auto

          [color "branch"]
          current = yellow bold
          local = green bold
          remote = cyan bold

          [color "diff"]
          meta = yellow bold
          frag = magenta bold
          old = red bold
          new = green bold
          whitespace = red reverse

          [color "status"]
          added = green bold
          changed = yellow bold
          untracked = red bold

          [delta]
          side-by-side = true
          line-numbers = true
          diff-so-fancy = true

          [delta "decorations"]
          minus-style = red bold normal
          plus-style = green bold normal
          minus-emph-style = white bold red
          minus-non-emph-style = red bold normal
          plus-emph-style = white bold green
          plus-non-emph-style = green bold normal
          file-style = yellow bold none
          file-decoration-style = yellow box
          hunk-header-style = magenta bold
          hunk-header-decoration-style = magenta box
          minus-empty-line-marker-style = normal normal
          plus-empty-line-marker-style = normal normal
          line-numbers-right-format = "{np:^4}â”‚ "

          [diff]
          tool = code

          [difftool "code"]
          cmd = /usr/bin/code --wait --diff \"$LOCAL\" \"$BASE\" \"$REMOTE\"

          [difftool]
          prompt = false

          [merge]
          tool = code

          [mergetool "code"]
          cmd = /usr/bin/code --wait \"$MERGED\"

          [mergetool "code"]
          cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED

          [mergetool]
          prompt = false

          [push]
          default = simple
          verbose = true
          autoSetupRemote = true

          [commit]
          verbose = true

          [pull]
          verbose = true
          rebase = false

          [alias]
          logp = log --pretty=format:'%h %ad | %fs%d [%an]' --graph --date=short
          lg   = log --graph --decorate --date-order --first-parent --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%cr) %C(bold cyan)<%an>%Creset'
          lga  = log --graph --decorate --date-order --all --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%cr) %C(bold cyan)<%an>%Creset'
          lgb  = log --graph --decorate --date-order --branches --first-parent --pretty=format:'%C(auto)%h%Creset %C(auto)%d%Creset %s %C(green)(%cr) %C(bold cyan)<%an>%Creset'

          h   = help -a -g
          ha   = help -a
          hg   = help -g

          a = add --all
          ai = add -i
          #############
          ap = apply
          as = apply --stat
          ac = apply --check
          #############
          ama = am --abort
          amr = am --resolved
          ams = am --skip
          #############
          b = branch
          ba = branch -a
          bd = branch -d
          bdd = branch -D
          br = branch -r
          bc = rev-parse --abbrev-ref HEAD
          bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"
          bs = !git-branch-status
          #############
          c = commit -v
          ca = commit -v -a
          cm = commit -v -m
          cam = commit -v -am
          cem = commit -v --allow-empty -m
          cd = commit -v --amend
          cad = commit -v -a --amend
          ced = commit -v --allow-empty --amend
          #############
          cl = clone -v
          cld = clone -v --depth 1
          #############
          cp = cherry-pick -v
          cpa = cherry-pick -v --abort
          cpc = cherry-pick -v --continue
          #############
          sum = diff -v --compact-summary
          d = diff -v
          dp = diff -v --patience
          dc = diff -v --cached
          dk = diff -v --check
          dck = diff -v --cached --check
          dt = difftool
          dct = difftool --cached
          #############
          e = config --global -e
          #############
          f = fetch -v
          fo = fetch -v origin
          fu = fetch -v upstream
          #############
          fp = format-patch
          #############
          fk = fsck
          #############
          g = grep -p
          #############
          ls = ls-files
          lsf = !git ls-files | grep -i
          #############
          m = merge -v
          ma = merge -v --abort
          mc = merge -v --continue
          ms = merge -v --skip
          #############
          swm = switch master
          swd = switch develop
          swn = switch release/next
          #############
          o = checkout -v
          om = checkout -v master
          ob = checkout -v -b
          opr = !sh -c 'git fo pull/$1/head:pr-$1 && git o pr-$1'
          #############
          pr = prune -v
          #############
          ps = push -v
          psf = push -v -f
          psu = push -v -u
          pst = push -v --tags
          #############
          pso = push -v origin
          psao = push -v --all origin
          psfo = push -v -f origin
          psuo = push -v -u origin
          #############
          psom = push -v origin master
          psaom = push -v --all origin master
          psfom = push -v -f origin master
          psuom = push -v -u origin master
          psoc = !git push origin $(git bc)
          psaoc = !git push --all origin $(git bc)
          psfoc = !git push -f origin $(git bc)
          psuoc = !git push -u origin $(git bc)
          psdc = !git push origin :$(git bc)
          #############
          pl = pull -v
          pb = pull -v --rebase
          #############
          plo = pull -v origin
          pbo = pull -v --rebase origin
          plom = pull -v origin master
          ploc = !git pull origin $(git bc)
          pbom = pull -v --rebase origin master
          pboc = !git pull --rebase origin $(git bc)
          #############
          plu = pull -v upstream
          plum = pull -v upstream master
          pluc = !git pull upstream $(git bc)
          pbum = pull -v --rebase upstream master
          pbuc = !git pull --rebase upstream $(git bc)
          #############
          rb = rebase -v
          rba = rebase -v --abort
          rbc = rebase -v --continue
          rbi = rebase -v --interactive
          rbs = rebase -v --skip
          #############
          re = reset -v
          rh = reset -v HEAD
          reh = reset -v --hard
          rem = reset -v --mixed
          res = reset -v --soft
          rehh = reset -v --hard HEAD
          remh = reset -v --mixed HEAD
          resh = reset -v --soft HEAD
          rehom = reset -v --hard origin/master
          #############
          r = remote
          ra = remote add
          rr = remote rm
          rv = remote -v
          rn = remote rename
          rp = remote prune
          rs = remote show
          rao = remote add origin
          rau = remote add upstream
          rro = remote remove origin
          rru = remote remove upstream
          rso = remote show origin
          rsu = remote show upstream
          rpo = remote prune origin
          rpu = remote prune upstream
          #############
          rmf = rm -v -f
          rmrf = rm -v -r -f
          #############
          s = status
          sb = status -s -b
          #############
          sa = stash apply
          sc = stash clear
          sd = stash drop
          sl = stash list
          sp = stash pop
          ss = stash save
          ssk = stash save -k
          sw = stash show
          st = !git stash list | wc -l 2>/dev/null | grep -oEi '[0-9][0-9]*'
          #############
          t = tag -v
          td = tag -v -d
          #############
          w = show -v
          wp = show -v -p
          wr = show -v -p --no-color
          #############
          behind = !git rev-list --left-only --count $(git bu)...HEAD
          ahead = !git rev-list --right-only --count $(git bu)...HEAD
          #############
          ours = "!f() { git checkout --ours $@ && git add $@; }; f"
          theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
          subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' -
          human = name-rev --name-only --refs=refs/heads/*

          ####################
          # worktree handling
          fsw = !git branch work-"$USER"
          sww = !git switch work-"$USER"

          ####################
          # git flow handling
          frs = flow release start next
          frp = flow release publish next
          frf = flow release finish next -n
          fhs = flow hotfix start
          fhf = flow hotfix finish -n


          [gitflow "branch"]
          master = master
          develop = develop

          [gitflow "prefix"]
          feature = feature/
          bugfix = bugfix/
          release = release/
          hotfix = hotfix/
          support = support/

          [user]
          email = {{ user_email }}
          name = {{ user_short }}

          [credential]
          helper = /usr/bin/git-credential-manager-core
          credentialStore = secretservice

          [web]
          browser = {{ browser }}

    - name: "=====> merge bookmarks <====="
      ansible.builtin.blockinfile:
        path: "{{ home_dir }}/.config/gtk-3.0/bookmarks"
        create: true
        mode: u+rwx,g+rx,o+rx
        block: |
          file:///srv SRV
          file:///usr/share/backgrounds backgrounds
          file:///usr/share/sounds sounds
          smb://NAS;{{ user_id }}@nas/shared/ shared auf nas
          sftp://{{ user_id }}@amserver1/home/{{ user_id }} {{ user_id }} auf amserver1
          sftp://{{ user_id }}@amserver2/home/{{ user_id }} {{ user_id }} auf amserver2
        marker: " # {mark} ANSIBLE MANAGED BLOCK"

    - name: "=====> merge user folder bookmarks <====="
      ansible.builtin.blockinfile:
        path: "{{ home_dir }}/.config/gtk-3.0/bookmarks"
        create: true
        mode: u+rwx,g+rx,o+rx
        block: |
          file:///home/{{ user_id }}/{{ item }} {{ item }}
        marker: " # {mark} ANSIBLE MANAGED BLOCK {{ item }}"
      with_items: "{{ user_folder }}"

    - name: "=====> create desktop links <====="
      block:
        - name: Create target folder in home_store_dir if not exists
          ansible.builtin.file:
            path: "{{ home_store_dir }}/{{ item }}"
            mode: u+rwx,g+rx,o+rx
            state: directory
          loop: "{{ user_folder }}"
        - name: Create symbolic links in home_store_dir
          ansible.builtin.file:
            src: "{{ home_store_dir }}/{{ item }}"
            dest: "{{ home_dir }}/{{ item }}"
            state: link
          loop: "{{ user_folder }}"

    - name: Init flatpak themes
      ansible.builtin.shell: |
        sudo flatpak override --env=GTK_THEME=$MAIN_THEME
        sudo flatpak override --env=ICON_THEME=$MAIN_THEME
      register: my_output # <- Registers the command output.
      changed_when: my_output.rc != 0 # <- Uses the return code to define when the task has changed.
